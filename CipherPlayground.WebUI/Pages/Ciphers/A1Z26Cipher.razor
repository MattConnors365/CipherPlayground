<h4>Caesar Cipher</h4>

<label for="textField" class="form-label mt-2">Text:</label>
<input id="textField" class="form-control" @bind="InputText" required placeholder="Enter text" />

<label for="charDelField" class="form-label mt-2">Key:</label>
<input id="charDelField" class="form-control mt-2" @bind="CharDelimiter" placeholder="Enter character delimiter (default to dash)" />

<label for="wordDelField" class="form-label mt-2">Word Delimiter:</label>
<input id="wordDelField" class="form-control mt-2" @bind="WordDelimiter" placeholder="Enter word delimiter (default to whitespace)" />

<label for="modeField" class="form-label mt-2">Mode:</label>
<input id="modeField" class="form-control mt-2" @bind="Mode" type="number" placeholder="0 for Strict, 1 for Loose, 2 for Preserve (Default)" />


<button class="btn btn-primary mt-2" @onclick="Encrypt">Encrypt</button>
<button class="btn btn-secondary mt-2" @onclick="Decrypt">Decrypt</button>

<p class="mt-2"><strong>Result:</strong> @Result</p>

@code {
    private string? InputText;
    private string? CharDelimiter;
    private string? WordDelimiter;
    private int Mode = 2; // Default to Preserve mode
    private string Result = "";

    private HttpClient client = new HttpClient();
    private object Payload()
    {
        return new
        {
            Text = string.IsNullOrEmpty(InputText) ? "Hello" : InputText,
            CharDelimiter = string.IsNullOrEmpty(CharDelimiter) ? "-" : CharDelimiter,
            WordDelimiter = string.IsNullOrEmpty(WordDelimiter) ? " " : WordDelimiter,
            Mode = Mode
        };
    }

    private async Task Encrypt()
    {
        var response = await client.PostAsJsonAsync("https://cipherplayground-api.onrender.com/api/a1z26/encrypt", Payload());
        Result = await response.Content.ReadAsStringAsync();
    }
    private async Task Decrypt()
    {
        var response = await client.PostAsJsonAsync("https://cipherplayground-api.onrender.com/api/a1z26/decrypt", Payload());
        Result = await response.Content.ReadAsStringAsync();
    }
}
